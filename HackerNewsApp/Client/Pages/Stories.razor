@page "/stories"
@using HackerNewsApp.Shared
@inject HttpClient Http

<PageTitle>Random stories</PageTitle>


@if (stories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container d-flex flex-wrap  gap-3">

        @foreach (var story in stories)
        {
            <div class="card">
                <div class="card-body d-flex flex-column align-content-between">
                    <h5 class="card-title">
                        <a href="@story.Url"> @story.Title</a>
                    </h5>
                </div>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">Story score is <strong>@story.Score</strong> </li>
                    <li class="list-group-item">
                        @(DateTimeOffset.FromUnixTimeSeconds(story.Time).DateTime)
                    </li>
                    <li class="list-group-item">By <strong>@story.User.Id</strong>, karma <strong> @story.User.Karma</strong></li>
                </ul>
                <div class="card-body text-end">
                    <button type="button" class="btn btn-outline-danger w-100" @onclick="() => DeleteAsync(story.Id)">slet</button>
                </div>
            </div>
        }
    </div>
}

@code {
    private IList<Story>? stories;

    protected override async Task OnInitializedAsync()
    {
        await ReloadStories();
    }
    private async Task DeleteAsync(int id)
    {
        var res = await Http.DeleteAsync($"Story/{id}");
        await ReloadStories();

    }

    private async Task ReloadStories()
    {
        stories = await Http.GetFromJsonAsync<IList<Story>>("Story/random/10");

    }
}
